# Generated by Django 2.2.5 on 2020-03-06 11:22
import json
import os

from django.db import migrations


class CombinePermissionManager:
    FILE = 'initial_permissions.json'
    CONTENT_TYPE = 'contenttypes.contenttype'
    PERMISSION = 'auth.permission'
    GROUP = 'auth.group'
    LEVEL = 'accounts.grouplevel'

    def __init__(self, apps):
        self.apps = apps
        self.data_set = self._load_data()

    def _load_data(self):
        data_set = {
            self.CONTENT_TYPE: {},
            self.PERMISSION: {},
            self.GROUP: {},
            self.LEVEL: {},
        }
        with open(os.path.abspath(str(self.FILE))) as f:
            for data in json.loads(f.read()):
                model = data['model']
                pk = data['pk']
                data_set[model][pk] = data.get('fields')
        return data_set

    def _get_or_create_permission(self, permission_pk):
        codename = self.data_set[self.PERMISSION][permission_pk]['codename']
        name = self.data_set[self.PERMISSION][permission_pk]['name']
        permission_obj = self.apps.get_model(self.PERMISSION).objects.filter(
            codename=codename,
            name=name
        ).first()
        is_new = False

        if not permission_obj:
            content_type_pk = self.data_set[self.PERMISSION][permission_pk]['content_type']
            ct_obj, is_new = self.apps.get_model(self.CONTENT_TYPE).objects.get_or_create(
                app_label=self.data_set[self.CONTENT_TYPE][content_type_pk]['app_label'],
                model=self.data_set[self.CONTENT_TYPE][content_type_pk]['model'],
            )
            permission_obj, is_new = self.apps.get_model(self.PERMISSION).objects.get_or_create(
                name=name,
                codename=codename,
                content_type=ct_obj,
            )
        print(permission_obj, is_new)
        return permission_obj

    def _get_or_create_group(self, group_pk):
        name = self.data_set[self.GROUP][group_pk]['name']
        group_obj, is_new = self.apps.get_model(self.GROUP).objects.get_or_create(
            name=name
        )
        # update permission
        new_permissions = []
        for permission_pk in self.data_set[self.GROUP][group_pk]['permissions']:
            permission_obj = self._get_or_create_permission(
                permission_pk=permission_pk
            )
            new_permissions.append(permission_obj)
        group_obj.permissions.set(new_permissions)
        group_obj.save()
        print(group_obj, is_new)
        return group_obj

    def start_combine(self):
        for level_pk, fields in self.data_set[self.LEVEL].items():
            level = self.data_set[self.LEVEL][level_pk]['level']
            group_pk = self.data_set[self.LEVEL][level_pk]['group']
            group_obj = self._get_or_create_group(group_pk=group_pk)

            level_obj, is_new = self.apps.get_model(self.LEVEL).objects.get_or_create(
                level=level,
                group=group_obj
            )
            print(level_obj, is_new)


def combine_initial_permissions(apps, *arrs, **kwars):
    print('Start combine permissions')
    combine_manger = CombinePermissionManager(apps=apps)
    combine_manger.start_combine()
    print('Permissions combined successfully')


class Migration(migrations.Migration):
    dependencies = [
        ('accounts', '0008_grouplevel'),
    ]

    operations = [
        migrations.RunPython(combine_initial_permissions)
    ]
